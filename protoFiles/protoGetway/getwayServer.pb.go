// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: getwayServer.proto

package protoGetway

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation errorBox at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//请求节点登录
type ReqNodeLogin struct {
	NodeID               int32    `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NodeTypeID           int32    `protobuf:"varint,2,opt,name=nodeTypeID,proto3" json:"nodeTypeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeLogin) Reset()         { *m = ReqNodeLogin{} }
func (m *ReqNodeLogin) String() string { return proto.CompactTextString(m) }
func (*ReqNodeLogin) ProtoMessage()    {}
func (*ReqNodeLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac132e4481e40c78, []int{0}
}
func (m *ReqNodeLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeLogin.Merge(m, src)
}
func (m *ReqNodeLogin) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeLogin proto.InternalMessageInfo

func (m *ReqNodeLogin) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *ReqNodeLogin) GetNodeTypeID() int32 {
	if m != nil {
		return m.NodeTypeID
	}
	return 0
}

//回复节点登录
type AnsNodeLogin struct {
	NodeID               int32    `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NodeTypeID           int32    `protobuf:"varint,2,opt,name=nodeTypeID,proto3" json:"nodeTypeID,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=errorBox,proto3" json:"errorBox,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnsNodeLogin) Reset()         { *m = AnsNodeLogin{} }
func (m *AnsNodeLogin) String() string { return proto.CompactTextString(m) }
func (*AnsNodeLogin) ProtoMessage()    {}
func (*AnsNodeLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac132e4481e40c78, []int{1}
}
func (m *AnsNodeLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsNodeLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsNodeLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsNodeLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsNodeLogin.Merge(m, src)
}
func (m *AnsNodeLogin) XXX_Size() int {
	return m.Size()
}
func (m *AnsNodeLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsNodeLogin.DiscardUnknown(m)
}

var xxx_messageInfo_AnsNodeLogin proto.InternalMessageInfo

func (m *AnsNodeLogin) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *AnsNodeLogin) GetNodeTypeID() int32 {
	if m != nil {
		return m.NodeTypeID
	}
	return 0
}

func (m *AnsNodeLogin) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqNodeLogin)(nil), "protoGetway.ReqNodeLogin")
	proto.RegisterType((*AnsNodeLogin)(nil), "protoGetway.AnsNodeLogin")
}

func init() { proto.RegisterFile("getwayServer.proto", fileDescriptor_ac132e4481e40c78) }

var fileDescriptor_ac132e4481e40c78 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x4f, 0x2d, 0x29,
	0x4f, 0xac, 0x0c, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x06, 0x53, 0xee, 0x60, 0x09, 0x25, 0x37, 0x2e, 0x9e, 0xa0, 0xd4, 0x42, 0xbf, 0xfc, 0x94, 0x54,
	0x9f, 0xfc, 0xf4, 0xcc, 0x3c, 0x21, 0x31, 0x2e, 0xb6, 0xbc, 0xfc, 0x94, 0x54, 0x4f, 0x17, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x28, 0x4f, 0x48, 0x8e, 0x8b, 0x0b, 0xc4, 0x0a, 0xa9, 0x2c,
	0x00, 0xc9, 0x31, 0x81, 0xe5, 0x90, 0x44, 0x94, 0x62, 0xb8, 0x78, 0x1c, 0xf3, 0x8a, 0x29, 0x36,
	0x47, 0x48, 0x84, 0x8b, 0x35, 0xb5, 0xa8, 0x28, 0xbf, 0x48, 0x82, 0x59, 0x81, 0x51, 0x83, 0x33,
	0x08, 0xc2, 0x31, 0xe2, 0xe6, 0xe2, 0x0c, 0x2a, 0x48, 0x76, 0xcd, 0x4b, 0xcf, 0xcc, 0x4b, 0x75,
	0x12, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c,
	0x96, 0x63, 0x48, 0x62, 0x03, 0xfb, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xef, 0xf1, 0xb8,
	0x28, 0xee, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcEngineClient is the client API for RpcEngine component.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcEngineClient interface {
}

type rpcEngineClient struct {
	cc *grpc.ClientConn
}

func NewRpcEngineClient(cc *grpc.ClientConn) RpcEngineClient {
	return &rpcEngineClient{cc}
}

// RpcEngineServer is the server API for RpcEngine component.
type RpcEngineServer interface {
}

func RegisterRpcEngineServer(s *grpc.Server, srv RpcEngineServer) {
	s.RegisterService(&_RpcEngine_serviceDesc, srv)
}

var _RpcEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoGetway.RpcEngine",
	HandlerType: (*RpcEngineServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "getwayServer.proto",
}

func (m *ReqNodeLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGetwayServer(dAtA, i, uint64(m.NodeID))
	}
	if m.NodeTypeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGetwayServer(dAtA, i, uint64(m.NodeTypeID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnsNodeLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsNodeLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGetwayServer(dAtA, i, uint64(m.NodeID))
	}
	if m.NodeTypeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGetwayServer(dAtA, i, uint64(m.NodeTypeID))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGetwayServer(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintGetwayServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqNodeLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovGetwayServer(uint64(m.NodeID))
	}
	if m.NodeTypeID != 0 {
		n += 1 + sovGetwayServer(uint64(m.NodeTypeID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsNodeLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovGetwayServer(uint64(m.NodeID))
	}
	if m.NodeTypeID != 0 {
		n += 1 + sovGetwayServer(uint64(m.NodeTypeID))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovGetwayServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGetwayServer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGetwayServer(x uint64) (n int) {
	return sovGetwayServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqNodeLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetwayServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeLogin: illegal tag %d (wire typedef %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetwayServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTypeID", wireType)
			}
			m.NodeTypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetwayServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeTypeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetwayServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetwayServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetwayServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsNodeLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetwayServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsNodeLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsNodeLogin: illegal tag %d (wire typedef %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetwayServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTypeID", wireType)
			}
			m.NodeTypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetwayServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeTypeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetwayServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetwayServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGetwayServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGetwayServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetwayServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetwayServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGetwayServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGetwayServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetwayServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetwayServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGetwayServer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGetwayServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGetwayServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGetwayServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGetwayServer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGetwayServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGetwayServer   = fmt.Errorf("proto: integer overflow")
)
