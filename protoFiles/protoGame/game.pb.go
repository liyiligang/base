// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game.proto

package protoGame

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation errorBox at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//*******************消息包*****************
type HttpMessage struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserID               int32    `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	NodeID               int32    `protobuf:"varint,3,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NodeTypeID           int32    `protobuf:"varint,4,opt,name=nodeTypeID,proto3" json:"nodeTypeID,omitempty"`
	Order                int32    `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Message              []byte   `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpMessage) Reset()         { *m = HttpMessage{} }
func (m *HttpMessage) String() string { return proto.CompactTextString(m) }
func (*HttpMessage) ProtoMessage()    {}
func (*HttpMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{0}
}
func (m *HttpMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpMessage.Merge(m, src)
}
func (m *HttpMessage) XXX_Size() int {
	return m.Size()
}
func (m *HttpMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HttpMessage proto.InternalMessageInfo

func (m *HttpMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *HttpMessage) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *HttpMessage) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *HttpMessage) GetNodeTypeID() int32 {
	if m != nil {
		return m.NodeTypeID
	}
	return 0
}

func (m *HttpMessage) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *HttpMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

//请求用户登录
type ReqUserLogin struct {
	Code                 string   `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	AnonymousCode        string   `protobuf:"bytes,2,opt,name=AnonymousCode,proto3" json:"AnonymousCode,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	NodeTypeID           int32    `protobuf:"varint,4,opt,name=nodeTypeID,proto3" json:"nodeTypeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUserLogin) Reset()         { *m = ReqUserLogin{} }
func (m *ReqUserLogin) String() string { return proto.CompactTextString(m) }
func (*ReqUserLogin) ProtoMessage()    {}
func (*ReqUserLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{1}
}
func (m *ReqUserLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUserLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUserLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUserLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUserLogin.Merge(m, src)
}
func (m *ReqUserLogin) XXX_Size() int {
	return m.Size()
}
func (m *ReqUserLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUserLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUserLogin proto.InternalMessageInfo

func (m *ReqUserLogin) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ReqUserLogin) GetAnonymousCode() string {
	if m != nil {
		return m.AnonymousCode
	}
	return ""
}

func (m *ReqUserLogin) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReqUserLogin) GetNodeTypeID() int32 {
	if m != nil {
		return m.NodeTypeID
	}
	return 0
}

//回复用户登录
type AnsUserLogin struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	ImageUrl             string   `protobuf:"bytes,3,opt,name=ImageUrl,proto3" json:"ImageUrl,omitempty"`
	Token                string   `protobuf:"bytes,4,opt,name=Token,proto3" json:"Token,omitempty"`
	GetwayAddr           string   `protobuf:"bytes,5,opt,name=GetwayAddr,proto3" json:"GetwayAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnsUserLogin) Reset()         { *m = AnsUserLogin{} }
func (m *AnsUserLogin) String() string { return proto.CompactTextString(m) }
func (*AnsUserLogin) ProtoMessage()    {}
func (*AnsUserLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{2}
}
func (m *AnsUserLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsUserLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsUserLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsUserLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsUserLogin.Merge(m, src)
}
func (m *AnsUserLogin) XXX_Size() int {
	return m.Size()
}
func (m *AnsUserLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsUserLogin.DiscardUnknown(m)
}

var xxx_messageInfo_AnsUserLogin proto.InternalMessageInfo

func (m *AnsUserLogin) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *AnsUserLogin) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *AnsUserLogin) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *AnsUserLogin) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AnsUserLogin) GetGetwayAddr() string {
	if m != nil {
		return m.GetwayAddr
	}
	return ""
}

//请求用户更新信息
type ReqUserInfoUpdate struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	ImageUrl             string   `protobuf:"bytes,3,opt,name=ImageUrl,proto3" json:"ImageUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUserInfoUpdate) Reset()         { *m = ReqUserInfoUpdate{} }
func (m *ReqUserInfoUpdate) String() string { return proto.CompactTextString(m) }
func (*ReqUserInfoUpdate) ProtoMessage()    {}
func (*ReqUserInfoUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{3}
}
func (m *ReqUserInfoUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUserInfoUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUserInfoUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUserInfoUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUserInfoUpdate.Merge(m, src)
}
func (m *ReqUserInfoUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ReqUserInfoUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUserInfoUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUserInfoUpdate proto.InternalMessageInfo

func (m *ReqUserInfoUpdate) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReqUserInfoUpdate) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *ReqUserInfoUpdate) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

//回复用户更新信息
type AnsUserInfoUpdate struct {
	NickName             string   `protobuf:"bytes,1,opt,name=NickName,proto3" json:"NickName,omitempty"`
	ImageUrl             string   `protobuf:"bytes,2,opt,name=ImageUrl,proto3" json:"ImageUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnsUserInfoUpdate) Reset()         { *m = AnsUserInfoUpdate{} }
func (m *AnsUserInfoUpdate) String() string { return proto.CompactTextString(m) }
func (*AnsUserInfoUpdate) ProtoMessage()    {}
func (*AnsUserInfoUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{4}
}
func (m *AnsUserInfoUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnsUserInfoUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnsUserInfoUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnsUserInfoUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnsUserInfoUpdate.Merge(m, src)
}
func (m *AnsUserInfoUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AnsUserInfoUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AnsUserInfoUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AnsUserInfoUpdate proto.InternalMessageInfo

func (m *AnsUserInfoUpdate) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *AnsUserInfoUpdate) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

//请求节点登录
type ReqNodeLogin struct {
	NodeID               int32    `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NodeTypeID           int32    `protobuf:"varint,2,opt,name=nodeTypeID,proto3" json:"nodeTypeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqNodeLogin) Reset()         { *m = ReqNodeLogin{} }
func (m *ReqNodeLogin) String() string { return proto.CompactTextString(m) }
func (*ReqNodeLogin) ProtoMessage()    {}
func (*ReqNodeLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{5}
}
func (m *ReqNodeLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNodeLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNodeLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNodeLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNodeLogin.Merge(m, src)
}
func (m *ReqNodeLogin) XXX_Size() int {
	return m.Size()
}
func (m *ReqNodeLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNodeLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNodeLogin proto.InternalMessageInfo

func (m *ReqNodeLogin) GetNodeID() int32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *ReqNodeLogin) GetNodeTypeID() int32 {
	if m != nil {
		return m.NodeTypeID
	}
	return 0
}

func init() {
	proto.RegisterType((*HttpMessage)(nil), "protoGame.HttpMessage")
	proto.RegisterType((*ReqUserLogin)(nil), "protoGame.ReqUserLogin")
	proto.RegisterType((*AnsUserLogin)(nil), "protoGame.AnsUserLogin")
	proto.RegisterType((*ReqUserInfoUpdate)(nil), "protoGame.ReqUserInfoUpdate")
	proto.RegisterType((*AnsUserInfoUpdate)(nil), "protoGame.AnsUserInfoUpdate")
	proto.RegisterType((*ReqNodeLogin)(nil), "protoGame.ReqNodeLogin")
}

func init() { proto.RegisterFile("game.proto", fileDescriptor_38fc58335341d769) }

var fileDescriptor_38fc58335341d769 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x65, 0x0a, 0xf4, 0xfb, 0x7a, 0xc5, 0x44, 0x26, 0x86, 0x34, 0x2c, 0x1a, 0xd2, 0xb8, 0x60,
	0xc5, 0x42, 0xd7, 0x2e, 0x50, 0x14, 0xeb, 0x0f, 0x8b, 0x86, 0x3e, 0xc0, 0x48, 0xaf, 0x0d, 0xc1,
	0xce, 0xd4, 0xb6, 0xc4, 0xb0, 0xf1, 0x29, 0x5c, 0xb8, 0xf7, 0x65, 0x5c, 0xfa, 0x08, 0x06, 0x5f,
	0xc4, 0x74, 0xa6, 0x94, 0x4a, 0x22, 0x26, 0xae, 0x3a, 0xe7, 0x9c, 0xe6, 0xde, 0x73, 0xef, 0x3d,
	0x00, 0x01, 0x0b, 0xb1, 0x17, 0xc5, 0x22, 0x15, 0xd4, 0x90, 0x9f, 0x21, 0x0b, 0xd1, 0x7e, 0x25,
	0xb0, 0x73, 0x91, 0xa6, 0xd1, 0x0d, 0x26, 0x09, 0x0b, 0x90, 0xee, 0x43, 0x3d, 0x15, 0x33, 0xe4,
	0x26, 0xe9, 0x90, 0xae, 0xe1, 0x2a, 0x40, 0x5b, 0xa0, 0xcf, 0x13, 0x8c, 0x9d, 0x81, 0xa9, 0x75,
	0x48, 0xb7, 0xee, 0xe6, 0x28, 0xe3, 0xb9, 0xf0, 0xd1, 0x19, 0x98, 0x55, 0xc5, 0x2b, 0x44, 0x2d,
	0x80, 0xec, 0x35, 0x5e, 0x44, 0x99, 0x56, 0x93, 0x5a, 0x89, 0xc9, 0xba, 0x88, 0xd8, 0xc7, 0xd8,
	0xac, 0x4b, 0x49, 0x01, 0x6a, 0xc2, 0xbf, 0x50, 0xd9, 0x30, 0xf5, 0x0e, 0xe9, 0x36, 0xdc, 0x15,
	0xb4, 0x9f, 0xa0, 0xe1, 0xe2, 0x83, 0x97, 0x60, 0x7c, 0x2d, 0x82, 0x29, 0xa7, 0x14, 0x6a, 0xa7,
	0xc2, 0xc7, 0xdc, 0xa4, 0x7c, 0xd3, 0x03, 0xd8, 0xed, 0x73, 0xc1, 0x17, 0xa1, 0x98, 0x27, 0x52,
	0xd4, 0xa4, 0xf8, 0x9d, 0xcc, 0x3a, 0x8f, 0xe5, 0x7c, 0x55, 0x35, 0x9f, 0x04, 0xbf, 0xf9, 0xb5,
	0x9f, 0x09, 0x34, 0xfa, 0x3c, 0x59, 0x1b, 0x68, 0x81, 0xee, 0xa9, 0x85, 0x10, 0x35, 0xb8, 0x42,
	0xb4, 0x0d, 0xff, 0x47, 0xd3, 0xc9, 0x6c, 0xc4, 0xc2, 0x55, 0xff, 0x02, 0x67, 0x9a, 0x13, 0xb2,
	0x00, 0xbd, 0xf8, 0x3e, 0xef, 0x5e, 0xe0, 0xb5, 0xad, 0xda, 0x86, 0xad, 0x21, 0xa6, 0x8f, 0x6c,
	0xd1, 0xf7, 0x7d, 0xb5, 0x2b, 0xc3, 0x2d, 0x31, 0x36, 0x83, 0x66, 0xbe, 0x16, 0x87, 0xdf, 0x09,
	0x2f, 0xf2, 0x59, 0x5a, 0x9a, 0x90, 0x94, 0x4b, 0xfd, 0xd1, 0x98, 0x7d, 0x05, 0xcd, 0x7c, 0xf0,
	0x52, 0x8b, 0x72, 0x31, 0xb2, 0xa5, 0x98, 0xb6, 0x51, 0xec, 0x5c, 0x9e, 0x71, 0x24, 0x7c, 0x2c,
	0xb6, 0x98, 0xc7, 0x87, 0x6c, 0x89, 0x8f, 0xb6, 0x79, 0x8e, 0xc3, 0x4b, 0x30, 0xdc, 0x68, 0x72,
	0xc6, 0x83, 0x29, 0x47, 0x7a, 0x0c, 0x46, 0x16, 0x60, 0x57, 0xcc, 0x53, 0xa4, 0xad, 0x5e, 0x11,
	0xed, 0x5e, 0x29, 0xd6, 0xed, 0x1f, 0x78, 0xbb, 0x72, 0xb2, 0xf7, 0xb6, 0xb4, 0xc8, 0xfb, 0xd2,
	0x22, 0x1f, 0x4b, 0x8b, 0xbc, 0x7c, 0x5a, 0x95, 0x5b, 0x5d, 0xfe, 0x7a, 0xf4, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x45, 0x0b, 0xd9, 0x36, 0x32, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcEngineClient is the client API for RpcEngine component.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcEngineClient interface {
	HttpRoute(ctx context.Context, in *HttpMessage, opts ...grpc.CallOption) (*HttpMessage, error)
}

type rpcEngineClient struct {
	cc *grpc.ClientConn
}

func NewRpcEngineClient(cc *grpc.ClientConn) RpcEngineClient {
	return &rpcEngineClient{cc}
}

func (c *rpcEngineClient) HttpRoute(ctx context.Context, in *HttpMessage, opts ...grpc.CallOption) (*HttpMessage, error) {
	out := new(HttpMessage)
	err := c.cc.Invoke(ctx, "/protoGame.RpcEngine/HttpRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcEngineServer is the server API for RpcEngine component.
type RpcEngineServer interface {
	HttpRoute(context.Context, *HttpMessage) (*HttpMessage, error)
}

func RegisterRpcEngineServer(s *grpc.Server, srv RpcEngineServer) {
	s.RegisterService(&_RpcEngine_serviceDesc, srv)
}

func _RpcEngine_HttpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcEngineServer).HttpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoGame.RpcEngine/HttpRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcEngineServer).HttpRoute(ctx, req.(*HttpMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoGame.RpcEngine",
	HandlerType: (*RpcEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HttpRoute",
			Handler:    _RpcEngine_HttpRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}

func (m *HttpMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.UserID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.UserID))
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.NodeID))
	}
	if m.NodeTypeID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.NodeTypeID))
	}
	if m.Order != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Order))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReqUserLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.AnonymousCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.AnonymousCode)))
		i += copy(dAtA[i:], m.AnonymousCode)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.NodeTypeID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.NodeTypeID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnsUserLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsUserLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.UserID))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.GetwayAddr) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.GetwayAddr)))
		i += copy(dAtA[i:], m.GetwayAddr)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReqUserInfoUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserInfoUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnsUserInfoUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnsUserInfoUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NickName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReqNodeLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNodeLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.NodeID))
	}
	if m.NodeTypeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.NodeTypeID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HttpMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.UserID != 0 {
		n += 1 + sovGame(uint64(m.UserID))
	}
	if m.NodeID != 0 {
		n += 1 + sovGame(uint64(m.NodeID))
	}
	if m.NodeTypeID != 0 {
		n += 1 + sovGame(uint64(m.NodeTypeID))
	}
	if m.Order != 0 {
		n += 1 + sovGame(uint64(m.Order))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUserLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.AnonymousCode)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.NodeTypeID != 0 {
		n += 1 + sovGame(uint64(m.NodeTypeID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsUserLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovGame(uint64(m.UserID))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.GetwayAddr)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUserInfoUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnsUserInfoUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqNodeLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovGame(uint64(m.NodeID))
	}
	if m.NodeTypeID != 0 {
		n += 1 + sovGame(uint64(m.NodeTypeID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGame(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HttpMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpMessage: illegal tag %d (wire typedef %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTypeID", wireType)
			}
			m.NodeTypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeTypeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserLogin: illegal tag %d (wire typedef %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnonymousCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnonymousCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTypeID", wireType)
			}
			m.NodeTypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeTypeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsUserLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsUserLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsUserLogin: illegal tag %d (wire typedef %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetwayAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetwayAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserInfoUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserInfoUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserInfoUpdate: illegal tag %d (wire typedef %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnsUserInfoUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnsUserInfoUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnsUserInfoUpdate: illegal tag %d (wire typedef %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNodeLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNodeLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNodeLogin: illegal tag %d (wire typedef %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTypeID", wireType)
			}
			m.NodeTypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeTypeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGame(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGame
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame   = fmt.Errorf("proto: integer overflow")
)
